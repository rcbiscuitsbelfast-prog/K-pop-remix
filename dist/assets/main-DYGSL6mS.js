(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const l of s.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&n(l)}).observe(document,{childList:!0,subtree:!0});function o(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerPolicy&&(s.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?s.credentials="include":i.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(i){if(i.ep)return;i.ep=!0;const s=o(i);fetch(i.href,s)}})();/**
 * MIFF Validation: Ensure `window.overlinkZone` is safely injected, typed, and accessible across remixable zones.
 *
 * Goals:
 * - Confirm `window.overlinkZone` is defined before use
 * - Validate its structure and expected properties
 * - Surface missing types or unsafe access patterns
 * - Ensure contributor clarity via comments and modular hooks
 *
 * @author MIFF Contributors
 * @version 1.0.0
 * @license MIT
 */function m(){const t={isValid:!1,isAvailable:!1,hasRequiredMethods:!1,hasOptionalFeatures:!1,warnings:[],errors:[],suggestions:[]};if(typeof window>"u")return t.errors.push("❌ Window object not available (Node.js environment)"),t.suggestions.push("This validation should only run in browser environments"),t;if(!("overlinkZone"in window))return t.warnings.push("⚠️ overlinkZone not found on window object"),t.suggestions.push("Ensure overlinkZone is initialized before validation"),t;t.isAvailable=!0;const e=window.overlinkZone;if(!e||typeof e!="object")return t.errors.push("❌ overlinkZone is not a valid object"),t;const o=["id","mount","unmount","activateTheme","getCurrentTheme","getAudioPlaybackState","getBadgePreview","isRemixSafe","getCurrentZone","switchZone"],n=[];o.forEach(l=>{l in e&&typeof e[l]=="function"||n.push(l)}),n.length===0?(t.hasRequiredMethods=!0,t.isValid=!0):(t.errors.push(`❌ Missing required methods: ${n.join(", ")}`),t.suggestions.push("Implement missing methods to ensure full functionality"));const i=["setAudioVolume","getContributorBadges","getRemixMetadata","enableDebugMode","disableDebugMode","getDebugState"],s=[];if(i.forEach(l=>{l in e&&typeof e[l]=="function"&&s.push(l)}),s.length>0&&(t.hasOptionalFeatures=!0,t.warnings.push(`ℹ️ Optional features available: ${s.join(", ")}`)),(typeof e.id!="string"||e.id.trim()==="")&&t.warnings.push("⚠️ Zone ID should be a non-empty string"),typeof e.mount!="function"&&t.errors.push("❌ Mount method must be a function"),typeof e.unmount!="function"&&t.errors.push("❌ Unmount method must be a function"),typeof e.isRemixSafe=="function")try{typeof e.isRemixSafe()!="boolean"&&t.warnings.push("⚠️ isRemixSafe should return a boolean")}catch(l){t.warnings.push(`⚠️ isRemixSafe method threw an error: ${l}`)}return t}function p(){const t={core:!1,themes:!1,audio:!1,badges:!1,remix:!1,zones:!1,debug:!1};if(typeof window>"u"||!("overlinkZone"in window))return t;const e=window.overlinkZone;return t.core=!!(e&&typeof e.mount=="function"&&typeof e.unmount=="function"),t.themes=!!(e&&typeof e.activateTheme=="function"&&typeof e.getCurrentTheme=="function"),t.audio=!!(e&&typeof e.getAudioPlaybackState=="function"&&typeof e.setAudioVolume=="function"),t.badges=!!(e&&typeof e.getBadgePreview=="function"&&typeof e.getContributorBadges=="function"),t.remix=!!(e&&typeof e.isRemixSafe=="function"&&typeof e.getRemixMetadata=="function"),t.zones=!!(e&&typeof e.getCurrentZone=="function"&&typeof e.switchZone=="function"),t.debug=!!(e&&typeof e.enableDebugMode=="function"&&typeof e.getDebugState=="function"),t}function f(t,e,...o){try{if(typeof window<"u"&&"overlinkZone"in window){const n=window.overlinkZone;if(n&&typeof n[t]=="function")return n[t](...o)}}catch(n){console.warn(`⚠️ Error calling overlinkZone.${String(t)}:`,n)}return e}const r={currentZone:"synth_nexus",remixMode:!1,canvas:document.getElementById("gameCanvas"),ctx:null,isRunning:!1,lastTime:0},c={synth_nexus:{name:"Synth Nexus",description:"Central hub connecting all game zones",color:"#00ff00",elements:[{id:"btn_toppler",x:200,y:200,width:120,height:60,text:"Toppler",color:"#ff0000"},{id:"btn_spirit_tamer",x:400,y:200,width:120,height:60,text:"Spirit Tamer",color:"#0000ff"},{id:"btn_witcher_grove",x:300,y:300,width:120,height:60,text:"Witcher Grove",color:"#ffff00"},{id:"btn_overlink",x:300,y:400,width:120,height:60,text:"OverlinkPure",color:"#ff00ff"}]},toppler:{name:"Toppler Demo",description:"Physics-based platformer with modular systems",color:"#ff0000",elements:[{id:"platform",x:100,y:500,width:600,height:20,color:"#666666"},{id:"player",x:50,y:450,width:20,height:20,color:"#ff0000"},{id:"btn_back",x:700,y:50,width:80,height:30,text:"← Back",color:"#00ff00"}]},spirit_tamer:{name:"Spirit Tamer Demo",description:"Rhythm-based spirit collection game",color:"#0000ff",elements:[{id:"spirit",x:400,y:300,width:30,height:30,color:"#00ffff"},{id:"rhythm_bar",x:200,y:500,width:400,height:20,color:"#666666"},{id:"btn_back",x:700,y:50,width:80,height:30,text:"← Back",color:"#00ff00"}]},witcher_grove:{name:"Witcher Grove Demo",description:"Open-world exploration with quest systems",color:"#ffff00",elements:[{id:"tree",x:300,y:200,width:40,height:80,color:"#228b22"},{id:"quest_marker",x:500,y:300,width:20,height:20,color:"#ffd700"},{id:"btn_back",x:700,y:50,width:80,height:30,text:"← Back",color:"#00ff00"}]},overlink:{name:"OverlinkPure Zone",description:"Meta-zone with themes, audio, and badge systems",color:"#ff00ff",elements:[{id:"theme_selector",x:200,y:200,width:120,height:60,text:"Themes",color:"#00ffff"},{id:"audio_controls",x:400,y:200,width:120,height:60,text:"Audio",color:"#ff8800"},{id:"badge_system",x:300,y:300,width:120,height:60,text:"Badges",color:"#ff0088"},{id:"btn_back",x:700,y:50,width:80,height:30,text:"← Back",color:"#00ff00"}]}};function y(){if(!r.canvas)return console.error("Canvas not found"),!1;const t=r.canvas.getContext("2d");if(!t)return console.error("Could not get 2D context"),!1;r.ctx=t;const e=document.getElementById("gameContainer");return e&&(r.canvas.width=e.clientWidth,r.canvas.height=e.clientHeight),!0}function x(t){const e=c[t];if(!e)return;const o=r.ctx,n=r.canvas;o.fillStyle="#000000",o.fillRect(0,0,n.width,n.height),o.fillStyle=e.color+"20",o.fillRect(0,0,n.width,n.height),o.fillStyle=e.color,o.font="bold 32px Courier New",o.textAlign="center",o.fillText(e.name,n.width/2,80),o.font="16px Courier New",o.fillStyle="#ffffff",o.fillText(e.description,n.width/2,120),e.elements.forEach(i=>{o.fillStyle=i.color,o.fillRect(i.x,i.y,i.width,i.height),i.text&&(o.fillStyle="#ffffff",o.font="14px Courier New",o.textAlign="center",o.fillText(i.text,i.x+i.width/2,i.y+i.height/2+5))})}function u(t,e){const o=c[r.currentZone];o&&o.elements.forEach(n=>{if(t>=n.x&&t<=n.x+n.width&&e>=n.y&&e<=n.y+n.height){if(n.id==="btn_back"){r.currentZone="synth_nexus",a();return}if(n.id==="btn_toppler"){r.currentZone="toppler",a();return}if(n.id==="btn_spirit_tamer"){r.currentZone="spirit_tamer",a();return}if(n.id==="btn_witcher_grove"){r.currentZone="witcher_grove",a();return}if(n.id==="btn_overlink"){r.currentZone="overlink",a();return}console.log(`Interacted with: ${n.id}`)}})}function a(){const t=c[r.currentZone];if(!t)return;const e=document.getElementById("currentZone"),o=document.getElementById("remixStatus");e&&(e.textContent=t.name),o&&(o.textContent=r.remixMode?"On":"Off");const n=document.getElementById("remixToggle");n&&(n.textContent=r.remixMode?"Disable Remix Mode":"Enable Remix Mode")}function d(t){r.isRunning&&(r.lastTime=t,x(r.currentZone),requestAnimationFrame(d))}function v(){document.querySelectorAll(".mobileBtn").forEach(e=>{e.addEventListener("touchstart",o=>{o.preventDefault();const n=e.getBoundingClientRect(),i=n.left+n.width/2,s=n.top+n.height/2,l=r.canvas.getBoundingClientRect(),g=i-l.left,h=s-l.top;u(g,h)})})}function w(){document.addEventListener("keydown",t=>{switch(t.key){}})}function b(){r.canvas.addEventListener("click",t=>{const e=r.canvas.getBoundingClientRect(),o=t.clientX-e.left,n=t.clientY-e.top;u(o,n)})}function Z(){const t=document.getElementById("remixToggle");t&&t.addEventListener("click",()=>{r.remixMode=!r.remixMode,a();const e=f("isRemixSafe",!1);console.log("Remix mode toggled:",r.remixMode,"Remix safe:",e);const o=f("getRemixMetadata",null);o&&console.log("📋 Remix metadata:",o)})}function k(){const t=document.getElementById("loadingScreen"),e=document.getElementById("loadingProgress");if(t&&e){let o=0;const n=setInterval(()=>{o+=Math.random()*20,o>=100&&(o=100,clearInterval(n),setTimeout(()=>{t.classList.add("hidden"),S()},500)),e.style.width=o+"%"},100)}}function S(){if(!y()){console.error("Failed to initialize canvas");return}v(),w(),b(),Z(),a(),r.isRunning=!0,r.lastTime=performance.now(),requestAnimationFrame(d),console.log("MIFF Sampler started successfully")}async function M(){try{console.log("OverlinkZone module available for integration"),window.overlinkZone={id:"miff-sampler-overlink",mount:e=>{console.log("Mounting overlinkZone to container:",e)},unmount:()=>{console.log("Unmounting overlinkZone")},activateTheme:e=>console.log("Theme activated:",e),getCurrentTheme:()=>"neonGrid",getAudioPlaybackState:()=>({isPlaying:!1,currentTheme:null}),setAudioVolume:e=>console.log("Audio volume set to:",e),getBadgePreview:()=>"Badge system available",getContributorBadges:e=>[{type:"Remix Pioneer",level:"Gold"},{type:"Asset Auditor",level:"Silver"}],isRemixSafe:()=>!0,getRemixMetadata:()=>({license:"MIT",remixDepth:1,contributor:"miff_team"}),getCurrentZone:()=>r.currentZone,switchZone:e=>c[e]?(r.currentZone=e,a(),!0):!1,enableDebugMode:()=>console.log("Debug mode enabled"),disableDebugMode:()=>console.log("Debug mode disabled"),getDebugState:()=>({debugMode:!1,currentZone:r.currentZone,remixMode:r.remixMode})};const t=m();if(t.isValid){console.log("✅ OverlinkZone validation passed");const e=p();console.log("🏥 OverlinkZone health check:",e),t.warnings.length>0&&console.log("⚠️ Validation warnings:",t.warnings),t.suggestions.length>0&&console.log("💡 Suggestions:",t.suggestions)}else console.warn("⚠️ OverlinkZone validation failed:",t.errors),console.log("💡 Suggestions:",t.suggestions)}catch(t){console.log("OverlinkZone not available:",t)}}document.addEventListener("DOMContentLoaded",async()=>{console.log("MIFF Sampler initializing..."),await M(),k()});
